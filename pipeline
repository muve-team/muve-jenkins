pipeline {
    agent {
        kubernetes {
            yaml '''
                apiVersion: v1
                kind: Pod
                spec:
                  serviceAccountName: jenkins-1
                  containers:
                  - name: gradle
                    image: gradle:7.6.1-jdk17
                    command:
                    - cat
                    tty: true
                    resources:
                      requests:
                        memory: "1Gi"
                        cpu: "200m"
                      limits:
                        memory: "2Gi"
                        cpu: "500m"        
                    volumeMounts:
                    - name: gradle-cache
                      mountPath: /home/gradle/.gradle
                    - name: workspace
                      mountPath: /workspace
                  - name: docker
                    image: docker:24.0-dind
                    securityContext:
                      privileged: true
                    env:
                    - name: DOCKER_TLS_CERTDIR
                      value: ""
                    - name: DOCKER_HOST
                      value: tcp://localhost:2375
                    volumeMounts:
                    - name: workspace
                      mountPath: /workspace
                  volumes:
                  - name: gradle-cache
                    emptyDir: {}
                  - name: workspace
                    emptyDir: {}
            '''
            defaultContainer 'gradle'
        }
    }

    environment {
        AWS_REGION = 'ap-northeast-2'
        ECR_URI = '816208829212.dkr.ecr.ap-northeast-2.amazonaws.com'
        AWS_CREDENTIALS = credentials('aws-ecr-credentials')
        IMAGE_TAG = "${env.BUILD_NUMBER}"  // Jenkins 빌드 번호를 이미지 태그로 사용
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    credentialsId: 'ddaakk',
                    url: 'https://github.com/muve-team/muve-backend.git'
            }
        }

        stage('Build') {
            steps {
                sh '''
                    chmod +x ./gradlew
                    ./gradlew :admin:bootJar :api:bootJar -x test
                    mkdir -p /workspace/admin/build/libs
                    mkdir -p /workspace/api/build/libs
                    cp admin/build/libs/*.jar /workspace/admin/build/libs/
                    cp api/build/libs/*.jar /workspace/api/build/libs/
                '''
            }
        }

        stage('Docker Build & Push') {
            steps {
                container('docker') {
                    sh '''
                        apk add --no-cache aws-cli
                        aws configure set region ${AWS_REGION}
                        aws configure set aws_access_key_id "${AWS_CREDENTIALS_USR}"
                        aws configure set aws_secret_access_key "${AWS_CREDENTIALS_PSW}"
                        aws configure set output json
                        
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_URI}
                        
                        # Admin 빌드 및 푸시
                        mkdir -p admin/build/libs
                        cp /workspace/admin/build/libs/*.jar admin/build/libs/muve-admin.jar
                        docker build -t ${ECR_URI}/muve-admin-repo:${IMAGE_TAG} -f admin/Dockerfile admin
                        docker push ${ECR_URI}/muve-admin-repo:${IMAGE_TAG}
                        
                        # API 빌드 및 푸시
                        mkdir -p api/build/libs
                        cp /workspace/api/build/libs/*.jar api/build/libs/muve-api.jar
                        docker build -t ${ECR_URI}/muve-api-repo:${IMAGE_TAG} -f api/Dockerfile api
                        docker push ${ECR_URI}/muve-api-repo:${IMAGE_TAG}
                    '''
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline succeeded! Images pushed to ECR with tag ${IMAGE_TAG}.'
        }
        failure {
            echo 'Pipeline failed! Check the logs for details.'
        }
    }
}
